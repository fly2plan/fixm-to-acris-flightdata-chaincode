"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toPlain = exports.toPlains = exports.arrayItemToObject = void 0;
var isarray_1 = __importDefault(require("isarray"));
var utils_1 = require("./utils");
exports.arrayItemToObject = function (arrayVal, Clazz, options) {
    return arrayVal.map(function (v) {
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        return isarray_1.default(v) ? exports.arrayItemToObject(v, Clazz, options) : classToObject(v, Clazz, options);
    });
};
var classToObject = function (instance, Clazz, options) {
    var obj = {};
    var keyStore = utils_1.getKeyStore(Clazz);
    keyStore.forEach(function (propertiesOption, key) {
        var isValueNotExist = options.distinguishNullAndUndefined ? utils_1.isUndefined : utils_1.isNullOrUndefined;
        var instanceValue = isValueNotExist(instance[key]) ? propertiesOption.default : instance[key];
        var originalKey = propertiesOption.originalKey, afterSerializer = propertiesOption.afterSerializer, serializer = propertiesOption.serializer, targetClass = propertiesOption.targetClass, optional = propertiesOption.optional;
        var disallowIgnoreSerializer = propertiesOption.disallowIgnoreSerializer || !options.ignoreSerializer;
        var disallowIgnoreAfterSerializer = propertiesOption.disallowIgnoreAfterSerializer || !options.ignoreAfterSerializer;
        if (isValueNotExist(instanceValue)) {
            if (!optional) {
                throw new Error("Property '" + Clazz.name + "." + key + "' not found");
            }
            return;
        }
        var value = serializer && disallowIgnoreSerializer ? serializer(instanceValue, instance, obj, options) : instanceValue;
        if (value && targetClass) {
            if (isarray_1.default(value)) {
                value = exports.arrayItemToObject(value, targetClass, options);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-use-before-define
                value = exports.toPlain(value, targetClass, options);
            }
        }
        obj[originalKey] =
            afterSerializer && disallowIgnoreAfterSerializer ? afterSerializer(value, instance, obj, options) : value;
    });
    return obj;
};
exports.toPlains = function (instances, Clazz, options) {
    if (options === void 0) { options = {}; }
    if (!isarray_1.default(instances)) {
        throw new Error(Clazz + " instances must be an array");
    }
    return instances.map(function (item) { return classToObject(item, Clazz, options); });
};
exports.toPlain = function (instance, Clazz, options) {
    if (options === void 0) { options = {}; }
    return classToObject(instance, Clazz, options);
};
//# sourceMappingURL=to-plain.js.map