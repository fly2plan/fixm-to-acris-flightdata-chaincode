"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getKeyStore = exports.getOriginalKeyStore = exports.isNullOrUndefined = exports.isUndefined = exports.isNull = void 0;
var store_1 = __importStar(require("./store"));
exports.isNull = function (val) { return val === null; };
exports.isUndefined = function (val) { return val === undefined; };
exports.isNullOrUndefined = function (val) { return exports.isNull(val) || exports.isUndefined(val); };
exports.getOriginalKeyStore = function (Clazz) {
    var curLayer = Clazz;
    var cacheOriginalKeyStore = store_1.originalKeyStores.get(curLayer);
    if (cacheOriginalKeyStore) {
        return cacheOriginalKeyStore;
    }
    var originalKeyStore = new Map();
    while (curLayer.name && curLayer.prototype) {
        var constructor = curLayer.prototype.constructor;
        var targetStore = store_1.default.get(constructor);
        if (targetStore) {
            targetStore.forEach(function (storeItem, key) {
                var item = __assign({ key: key }, storeItem);
                if (!originalKeyStore.has(storeItem.originalKey)) {
                    originalKeyStore.set(storeItem.originalKey, [item]);
                }
                else {
                    var exists = originalKeyStore.get(storeItem.originalKey);
                    if (!exists.find(function (exist) { return exist.key === key; })) {
                        originalKeyStore.set(storeItem.originalKey, __spreadArrays(originalKeyStore.get(storeItem.originalKey), [item]));
                    }
                }
            });
        }
        curLayer = Object.getPrototypeOf(constructor);
    }
    store_1.originalKeyStores.set(Clazz, originalKeyStore);
    return originalKeyStore;
};
exports.getKeyStore = function (Clazz) {
    var cacheKeyStore = store_1.keyStores.get(Clazz);
    if (cacheKeyStore) {
        return cacheKeyStore;
    }
    var keyStore = new Map();
    var originalKeyStore = exports.getOriginalKeyStore(Clazz);
    originalKeyStore.forEach(function (storeItems) {
        var firstStoreItem = storeItems[0];
        if (storeItems.length === 1) {
            keyStore.set(firstStoreItem.key, firstStoreItem);
        }
        else {
            var hasStoreItems = storeItems.filter(function (storeItem) { return storeItem.serializeTarget; });
            if (hasStoreItems.length !== 1) {
                throw new Error("Only one of keys(" + storeItems.map(function (storeItem) { return storeItem.key; }).join(', ') + ") in " + Clazz.name + " can contain a serializeTarget when use toPlain");
            }
            var hasStoreItem = hasStoreItems[0];
            keyStore.set(hasStoreItem.key, hasStoreItem);
        }
    });
    store_1.keyStores.set(Clazz, keyStore);
    return keyStore;
};
//# sourceMappingURL=utils.js.map